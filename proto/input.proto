syntax = "proto2";

package proto;
import "enums.proto";
import "input_enums.proto";
import "device.proto";

message GPIOInput {
  required int32 pin = 1;
  required PinMode pinMode = 2;
  required bool analog = 3;
}

message MPR121Input {
  required int32 deviceid = 1;
  required int32 pin = 2;
  required Mpr121PinMode mode = 3;
  required PinMode pinMode = 4;
}

message MidiNoteInput { 
  required int32 deviceid = 1;
  required int32 note = 2; 
}

message MidiControlChangeInput { 
  required int32 deviceid = 1;
  required int32 cc = 2; 
}

message MidiPitchBendInput { 
  required int32 deviceid = 1; 
}

message FixedInput { required int32 value = 1; }

message WiiAxisInput {
  required int32 deviceid = 1;
  required WiiAxisType axis = 2;
}

message WiiButtonInput {
  required int32 deviceid = 1;
  required WiiButtonType button = 2;
}

message CrkdNeckButtonInput {
  required int32 deviceid = 1;
  required CrkdNeckButtonType button = 2;
}

message MouseAxisInput {
  required int32 deviceid = 1;
  required MouseAxisType axis = 2;
}

message MouseButtonInput {
  required int32 deviceid = 1;
  required MouseButtonType button = 2;
}

message KeyboardKeyInput {
  required int32 deviceid = 1;
  required int32 key = 2;
}

message ShortcutInput {
  repeated Input inputs = 1;
}

message Input {
  oneof input {
    GPIOInput gpio = 1;
    FixedInput fixed = 2;
    MPR121Input mpr121 = 3;
    MidiNoteInput midiNote = 4;
    MidiControlChangeInput midiControlChange = 5;
    MidiPitchBendInput midiPitchBend = 6;
    MouseAxisInput mouseAxis = 7;
    MouseButtonInput mouseButton = 8;
    WiiAxisInput wiiAxis = 9;
    WiiButtonInput wiiButton = 10;
    KeyboardKeyInput key = 11;
    CrkdNeckButtonInput crkd = 12;
    ShortcutInput shortcut = 13;
  }
}

message Mapping {
  oneof mapping {
    GamepadButtonType gamepadButton = 1;
    GamepadAxisType gamepadAxis = 2;
    GuitarHeroGuitarButtonType ghButton = 3;
    GuitarHeroGuitarAxisType ghAxis = 4;
    RockBandGuitarButtonType rbButton = 5;
    RockBandGuitarAxisType rbAxis = 6;
    ProGuitarButtonType proButton = 7;
    ProGuitarAxisType proAxis = 8;
    TurntableButtonType djButton = 9;
    TurntableAxisType djAxis = 10;
  }

  required Input input = 11;
  required bool inverted = 12;
  required Input pressureInput = 13; // if there is no pressureInput, then set the pressures to max when the button is pressed
  required AnalogToDigitalTriggerType trigger = 14;
  required int32 pressed = 15;
  required int32 released = 16;
  required int32 min = 17;
  required int32 max = 18;
  required int32 center = 19;
  required int32 deadzone = 20;
}
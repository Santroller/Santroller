syntax = "proto2";

package proto;
import "enums.proto";
import "input_enums.proto";
import "device.proto";

message GPIOInput {
  required int32 pin = 1;
  required PinMode pinMode = 2;
  required bool analog = 3;
}

message MPR121Input {
  required int32 deviceid = 1;
  required int32 pin = 2;
  required Mpr121PinMode mode = 3;
  required PinMode pinMode = 4;
}

message MidiNoteInput { 
  required int32 deviceid = 1;
  required int32 note = 2; 
}

message MidiControlChangeInput { 
  required int32 deviceid = 1;
  required int32 cc = 2; 
}

message MidiPitchBendInput { 
  required int32 deviceid = 1; 
}

message FixedInput { required int32 value = 1; }

message WiiAxisInput {
  required int32 deviceid = 1;
  required WiiAxisType axis = 2;
}

message WiiButtonInput {
  required int32 deviceid = 1;
  required WiiButtonType button = 2;
}

message CrkdNeckButtonInput {
  required int32 deviceid = 1;
  required CrkdNeckButtonType button = 2;
}

message MouseAxisInput {
  required int32 deviceid = 1;
  required MouseAxisType axis = 2;
}

message MouseButtonInput {
  required int32 deviceid = 1;
  required MouseButtonType button = 2;
}

message KeyboardKeyInput {
  required int32 deviceid = 1;
  required int32 key = 2;
}

message ShortcutInput {
  repeated Input inputs = 1;
}

message WiiExtensionTypeInput {
  required int32 deviceid = 1;
  required WiiExtType ext = 2;
}
message PS2ControllerTypeInput {
  required int32 deviceid = 1;
  required PS2ControllerType type = 2;
}
message UsbDeviceTypeInput {
  required int32 deviceid = 1;
  required UsbDeviceType type = 2;
  required SubType subtype = 3;
}
message BluetoothDeviceTypeInput {
  required int32 deviceid = 1;
  required UsbDeviceType type = 2;
  required SubType subtype = 3;
}

message Input {
  oneof input {
    GPIOInput gpio = 1;
    FixedInput fixed = 2;
    MPR121Input mpr121 = 3;
    MidiNoteInput midiNote = 4;
    MidiControlChangeInput midiControlChange = 5;
    MidiPitchBendInput midiPitchBend = 6;
    MouseAxisInput mouseAxis = 7;
    MouseButtonInput mouseButton = 8;
    WiiAxisInput wiiAxis = 9;
    WiiButtonInput wiiButton = 10;
    KeyboardKeyInput key = 11;
    CrkdNeckButtonInput crkd = 12;
    ShortcutInput shortcut = 13;
    WiiExtensionTypeInput wiiExtType = 14;
    PS2ControllerTypeInput ps2Type = 15;
    UsbDeviceTypeInput usbDevice = 16;
    BluetoothDeviceTypeInput bluetoothDevice = 17;
  }
}

message Mapping {
  oneof mapping {
    GamepadButtonType gamepadButton = 1;
    GamepadAxisType gamepadAxis = 2;
    GuitarHeroGuitarButtonType ghButton = 3;
    GuitarHeroGuitarAxisType ghAxis = 4;
    RockBandGuitarButtonType rbButton = 5;
    RockBandGuitarAxisType rbAxis = 6;
    GuitarHeroDrumButtonType ghDrumButton = 7;
    GuitarHeroDrumAxisType ghDrumAxis = 8;
    RockBandDrumButtonType rbDrumButton = 9;
    RockBandDrumAxisType rbDrumAxis = 10;
    GuitarHeroLiveGuitarButtonType ghlbutton = 11;
    GuitarHeroLiveGuitarAxisType ghlAxis = 12;
    ProGuitarButtonType proButton = 13;
    ProGuitarAxisType proAxis = 14;
    TurntableButtonType djButton = 15;
    TurntableAxisType djAxis = 16;
  }

  required Input input = 17;
  optional bool inverted = 18;
  optional Input pressureInput = 19; // if there is no pressureInput, then set the pressures to max when the button is pressed
  optional AnalogToDigitalTriggerType trigger = 20;
  optional int32 pressed = 21;
  optional int32 released = 22;
  optional int32 min = 23;
  optional int32 max = 24;
  optional int32 center = 25;
  optional int32 deadzone = 26;
}
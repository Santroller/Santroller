syntax = "proto2";

package proto;
import "enums.proto";
import "input_enums.proto";
import "device.proto";

message GPIOInput {
  required int32 pin = 1;
  required PinMode pinMode = 2;
  required bool analog = 3;
}

message MPR121Input {
  required int32 deviceid = 1;
  required int32 pin = 2;
  required Mpr121PinMode mode = 3;
  required PinMode pinMode = 4;
}

message MidiInput { required int32 note = 1; }

message FixedInput { required int32 value = 1; }

message WiiAxisInput {
  required int32 deviceid = 1;
  required WiiAxisType axis = 2;
}

message WiiButtonInput {
  required int32 deviceid = 1;
  required WiiButtonType button = 2;
}

message CrkdNeckButtonInput {
  required int32 deviceid = 1;
  required CrkdNeckButtonType button = 2;
}

message MouseAxisInput {
  required int32 deviceid = 1;
  required MouseAxisType axis = 2;
}

message MouseButtonInput {
  required int32 deviceid = 1;
  required MouseButtonType button = 2;
}

message KeyboardKeyInput {
  required int32 deviceid = 1;
  required int32 key = 2;
}

message Input {
  oneof input {
    GPIOInput gpio = 1;
    FixedInput fixed = 2;
    MPR121Input mpr121 = 3;
    MidiInput midi = 4;
    MouseAxisInput mouseAxis = 5;
    MouseButtonInput mouseButton = 6;
    WiiAxisInput wiiAxis = 7;
    WiiButtonInput wiiButton = 8;
    KeyboardKeyInput key = 9;
    CrkdNeckButtonInput crkd = 10;
  }
}

message GamepadButtonMapping {
  required GamepadButtonType button = 1;
  required bool inverted = 2;
  optional Input pressureInput = 3; // if there is no pressureInput, then set the pressures to max when the button is pressed
  optional AnalogToDigitalTriggerType trigger = 4;
}

message GamepadAxisMapping {
  required GamepadAxisType axis = 1;
  optional int32 onValue = 2; // if input is digital, use onValue when its active
  optional int32 offValue = 3; // and offValue when its inactive
}

message GuitarHeroGuitarButtonMapping {
  required GuitarHeroGuitarButtonType button = 1;
  required bool inverted = 2;
  optional AnalogToDigitalTriggerType trigger = 3;
}
message GuitarHeroGuitarAxisMapping {
  required GuitarHeroGuitarAxisType axis = 1;
  optional int32 onValue = 2; // if input is digital, use onValue when its active
  optional int32 offValue = 3; // and offValue when its inactive
}
message RockBandGuitarButtonMapping {
  required RockBandGuitarButtonType button = 1;
  required bool inverted = 2;
  optional AnalogToDigitalTriggerType trigger = 3;
}
message RockBandGuitarAxisMapping {
  required RockBandGuitarAxisType axis = 1;
  optional int32 onValue = 2; // if input is digital, use onValue when its active
  optional int32 offValue = 3; // and offValue when its inactive
}

message Mapping {
  required Input input = 1;
  oneof mapping {
    GamepadButtonMapping button = 2;
    GamepadAxisMapping axis = 3;
    GuitarHeroGuitarButtonMapping ghButton = 4;
    GuitarHeroGuitarAxisMapping ghAxis = 5;
    RockBandGuitarButtonMapping rbButton = 6;
    RockBandGuitarAxisMapping rbAxis = 7;
  }
}
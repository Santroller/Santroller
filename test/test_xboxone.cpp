#include <unity.h>

#include <xbox_one_parser.hpp>

XboxOneParser parser;
void setUp(void) {
}

void tearDown(void) {
}
uint8_t announce[] = {0x02, 0x20, 0x01, 0x1C, 0x7B, 0xED, 0x63, 0x01, 0x01, 0x01, 0x00, 0x00, 0x30, 0x14, 0x9B, 0x07, 0x01, 0x00, 0x00, 0x00, 0x10, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};
uint8_t xb1_descriptor[] = {0x04, 0xF0, 0x01, 0x3A, 0xA5, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x01, 0xCF, 0x00, 0x16, 0x00, 0x1F, 0x00, 0x20, 0x00, 0x27, 0x00, 0x2D, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x02, 0x03, 0x04, 0x06, 0x07, 0x05, 0x01, 0x04,
                            0x04, 0xA0, 0x01, 0xBA, 0x00, 0x3A, 0x05, 0x06, 0x0A, 0x03, 0x19, 0x00, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x58, 0x62, 0x6F, 0x78, 0x2E, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x47, 0x48, 0x37, 0x1A, 0x00, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x2E, 0x58, 0x62, 0x6F, 0x78, 0x2E, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x47, 0x61, 0x6D, 0x65, 0x70, 0x61,
                            0x04, 0xA0, 0x01, 0xBA, 0x00, 0x74, 0x64, 0x27, 0x00, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x2E, 0x58, 0x62, 0x6F, 0x78, 0x2E, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x2E, 0x4E, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6E, 0x74, 0x72, 0x6F, 0x6C, 0x6C, 0x65, 0x72, 0x04, 0xD9, 0xFD, 0x12, 0xFD, 0x73, 0x8E, 0xC7, 0x47, 0xA2, 0x31, 0x96, 0x26, 0x8C, 0x38, 0x00,
                            0x04, 0xA0, 0x01, 0x3A, 0xAE, 0x01, 0x9A, 0x2C, 0x40, 0x2E, 0x08, 0xDF, 0x07, 0xE1, 0x45, 0xA5, 0xAB, 0xA3, 0x12, 0x7A, 0xF1, 0x97, 0xB5, 0xE7, 0x1F, 0xF3, 0xB8, 0x86, 0x73, 0xE9, 0x40, 0xA9, 0xF8, 0x2F, 0x21, 0x26, 0x3A, 0xCF, 0xB7, 0x56, 0xFF, 0x76, 0x97, 0xFD, 0x9B, 0x81, 0x45, 0xAD, 0x45, 0xB6, 0x45, 0xBB, 0xA5, 0x26, 0xD6, 0x03, 0x17, 0x00, 0x20, 0x0E, 0x00, 0x01, 0x00, 0x10,
                            0x04, 0xA0, 0x01, 0x3A, 0xE8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x21, 0x20, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x22, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x04, 0xB0, 0x01, 0x03, 0xA2, 0x02, 0x00, 0x00, 0x00};
uint8_t xb1_descriptor_end[] = {0x04, 0xA0, 0x01, 0x00, 0xA5, 0x02};
// TODO: can we do a test that runs on the microcontroller and talks to a controller and validates everything that way?
void test_parser(void) {
    parser.parse(announce, sizeof(announce));
    uint8_t* current = xb1_descriptor;
    for (int i = 0; i < sizeof(xb1_descriptor); i += 64 ) {
        int remaining = sizeof(xb1_descriptor) - i;
        if (remaining > 64) {
            parser.parse(current, 64);
            current += 64;
        } else {
            parser.parse(current, remaining);
        }
    }
    parser.parse(xb1_descriptor_end, sizeof(xb1_descriptor_end));
}

int main() {
    UNITY_BEGIN();

    RUN_TEST(test_parser);

    UNITY_END();  // stop unit testing
    return 0;
}